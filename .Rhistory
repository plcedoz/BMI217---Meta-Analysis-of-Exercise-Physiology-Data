coefficients_temp = as.data.frame(sum$coefficients)
coefficients_temp[,"qvalue"] = as.numeric(qvalue(coefficients_temp$`Pr(>|z|)`)$qvalues)
coefficients_temp[,gene] = coefficients_temp$qvalue<0.05
coefficients_temp <- select(coefficients_temp, 6)
coefficients = cbind(coefficients, coefficients_temp)
}
gene = gene_hyper_null[1]
y_1 = as.factor(DMvalues_train_binary[,gene])
y_1_test = as.factor(DMvalues_test_binary[,gene])
model1 = glm(formula = y_1 ~ ., family = "binomial", data = as.data.frame(morpho_train))
y_pred1 = predict(model1, as.data.frame(morpho_test))
#plot(roc(y_1_test, y_pred1))
aucs[gene] = auc(y_1_test, y_pred1)
sum = summary(model1)
if (gene == gene_hyper_null[1]){
coefficients = as.data.frame(sum$coefficients)
coefficients[,"qvalue"] = as.numeric(qvalue(coefficients$`Pr(>|z|)`)$qvalues)
coefficients[,gene_hyper_null[1]] = coefficients$qvalue<0.05
coefficients <- select(coefficients, 6)
}else{
coefficients_temp = as.data.frame(sum$coefficients)
coefficients_temp[,"qvalue"] = as.numeric(qvalue(coefficients_temp$`Pr(>|z|)`)$qvalues)
coefficients_temp[,gene] = coefficients_temp$qvalue<0.05
coefficients_temp <- select(coefficients_temp, 6)
coefficients = cbind(coefficients, coefficients_temp)
}
gene = gene_hyper_null[2]
y_1 = as.factor(DMvalues_train_binary[,gene])
y_1_test = as.factor(DMvalues_test_binary[,gene])
model1 = glm(formula = y_1 ~ ., family = "binomial", data = as.data.frame(morpho_train))
y_pred1 = predict(model1, as.data.frame(morpho_test))
#plot(roc(y_1_test, y_pred1))
aucs[gene] = auc(y_1_test, y_pred1)
sum = summary(model1)
if (gene == gene_hyper_null[1]){
coefficients = as.data.frame(sum$coefficients)
coefficients[,"qvalue"] = as.numeric(qvalue(coefficients$`Pr(>|z|)`)$qvalues)
coefficients[,gene_hyper_null[1]] = coefficients$qvalue<0.05
coefficients <- select(coefficients, 6)
}else{
coefficients_temp = as.data.frame(sum$coefficients)
coefficients_temp[,"qvalue"] = as.numeric(qvalue(coefficients_temp$`Pr(>|z|)`)$qvalues)
coefficients_temp[,gene] = coefficients_temp$qvalue<0.05
coefficients_temp <- select(coefficients_temp, 6)
coefficients = cbind(coefficients, coefficients_temp)
}
gene = gene_hyper_null[3]
y_1 = as.factor(DMvalues_train_binary[,gene])
y_1_test = as.factor(DMvalues_test_binary[,gene])
model1 = glm(formula = y_1 ~ ., family = "binomial", data = as.data.frame(morpho_train))
y_pred1 = predict(model1, as.data.frame(morpho_test))
#plot(roc(y_1_test, y_pred1))
aucs[gene] = auc(y_1_test, y_pred1)
sum = summary(model1)
if (gene == gene_hyper_null[1]){
coefficients = as.data.frame(sum$coefficients)
coefficients[,"qvalue"] = as.numeric(qvalue(coefficients$`Pr(>|z|)`)$qvalues)
coefficients[,gene_hyper_null[1]] = coefficients$qvalue<0.05
coefficients <- select(coefficients, 6)
}else{
coefficients_temp = as.data.frame(sum$coefficients)
coefficients_temp[,"qvalue"] = as.numeric(qvalue(coefficients_temp$`Pr(>|z|)`)$qvalues)
coefficients_temp[,gene] = coefficients_temp$qvalue<0.05
coefficients_temp <- select(coefficients_temp, 6)
coefficients = cbind(coefficients, coefficients_temp)
rm(coefficients_temp)
}
View(coefficients_temp)
coefficients_temp[,"qvalue"] = as.numeric(qvalue(coefficients_temp$`Pr(>|z|)`)$qvalues)
coefficients_temp$`Pr(>|z|)`
qvalue(coefficients_temp$`Pr(>|z|)`)
rnage(coefficients_temp$`Pr(>|z|)`)
range(coefficients_temp$`Pr(>|z|)`)
?qvalue
qvalue(coefficients_temp$`Pr(>|z|)`, pi0.method = "bootstrap")
qvalue(coefficients_temp$`Pr(>|z|)`, pi0.method = "smoother")
qvalue(coefficients_temp$`Pr(>|z|)`, lambda = seq(0.05, 0.90, 0.05))
qvalue(coefficients_temp$`Pr(>|z|)`, lambda = seq(0.05, 0.95, 0.05))
qvalue(coefficients_temp$`Pr(>|z|)`, lambda = seq(0.05, 0.60, 0.05))
qvalue(coefficients_temp$`Pr(>|z|)`, lambda = seq(0.05, 0.90, 0.05))
for (gene in gene_hyper_null){
y_1 = as.factor(DMvalues_train_binary[,gene])
y_1_test = as.factor(DMvalues_test_binary[,gene])
model1 = glm(formula = y_1 ~ ., family = "binomial", data = as.data.frame(morpho_train))
y_pred1 = predict(model1, as.data.frame(morpho_test))
#plot(roc(y_1_test, y_pred1))
aucs[gene] = auc(y_1_test, y_pred1)
sum = summary(model1)
if (gene == gene_hyper_null[1]){
coefficients = as.data.frame(sum$coefficients)
coefficients[,"qvalue"] = as.numeric(qvalue(coefficients$`Pr(>|z|)`)$qvalues)
coefficients[,gene_hyper_null[1]] = coefficients$qvalue<0.05
coefficients <- select(coefficients, 6)
}else{
coefficients_temp = as.data.frame(sum$coefficients)
coefficients_temp[,"qvalue"] = as.numeric(qvalue(coefficients_temp$`Pr(>|z|)`, lambda = seq(0.05, 0.90, 0.05))$qvalues)
coefficients_temp[,gene] = coefficients_temp$qvalue<0.05
coefficients_temp <- select(coefficients_temp, 6)
coefficients = cbind(coefficients, coefficients_temp)
rm(coefficients_temp)
}
}
warnings()
View(coefficients)
mean_aucs_hyper_null = mean(aucs)
plot(density(aucs), main = "Density of AUCs for the hyper/null genes")
aucs = aucs[order(aucs, decreasing = TRUE)]
top_genes_auc = data.frame(aucs[1:10])
colnames(top_genes_auc) = "auc"
top_genes_auc
coef_temp = as.data.frame(apply(coefficients, MARGIN = 1, FUN = as.integer))
rownames(coef_temp) = colnames(coefficients)
coefficients = t(as.matrix(coef_temp))
heatmap.2(coefficients, col = c("white", "black"), trace = "none", scale = "none")
top_features_matrix = apply(coefficients, MARGIN = 1, FUN = sum)
top_features_matrix = as.data.frame(top_features_matrix[order(top_features_matrix, decreasing = TRUE)])
colnames(top_features_matrix) = "Number_of_significant_genes"
top_features_matrix[1:10,]
morpho = scale(morpho)
View(morpho)
morpho[,1]
mean(morpho[,1])
mean(morpho[1,])
sd(morpho[,1])
sd(morpho[1,])
morpho_train = morpho[sample,]
morpho_test = morpho[-sample,]
context = scale(context)
context_train = context[sample,]
context_test = context[-sample,]
aucs = c()
for (gene in gene_hyper_null){
y_1 = as.factor(DMvalues_train_binary[,gene])
y_1_test = as.factor(DMvalues_test_binary[,gene])
model1 = glm(formula = y_1 ~ ., family = "binomial", data = as.data.frame(morpho_train))
y_pred1 = predict(model1, as.data.frame(morpho_test))
#plot(roc(y_1_test, y_pred1))
aucs[gene] = auc(y_1_test, y_pred1)
sum = summary(model1)
if (gene == gene_hyper_null[1]){
coefficients = as.data.frame(sum$coefficients)
coefficients[,"qvalue"] = as.numeric(qvalue(coefficients$`Pr(>|z|)`)$qvalues)
coefficients[,gene_hyper_null[1]] = coefficients$qvalue<0.05
coefficients <- select(coefficients, 6)
}else{
coefficients_temp = as.data.frame(sum$coefficients)
coefficients_temp[,"qvalue"] = as.numeric(qvalue(coefficients_temp$`Pr(>|z|)`, lambda = seq(0.05, 0.90, 0.05))$qvalues)
coefficients_temp[,gene] = coefficients_temp$qvalue<0.05
coefficients_temp <- select(coefficients_temp, 6)
coefficients = cbind(coefficients, coefficients_temp)
rm(coefficients_temp)
}
}
mean_aucs_hyper_null = mean(aucs)
plot(density(aucs), main = "Density of AUCs for the hyper/null genes")
aucs = aucs[order(aucs, decreasing = TRUE)]
top_genes_auc = data.frame(aucs[1:10])
colnames(top_genes_auc) = "auc"
top_genes_auc
coef_temp = as.data.frame(apply(coefficients, MARGIN = 1, FUN = as.integer))
rownames(coef_temp) = colnames(coefficients)
coefficients = t(as.matrix(coef_temp))
heatmap.2(coefficients, col = c("white", "black"), trace = "none", scale = "none")
top_features_matrix = apply(coefficients, MARGIN = 1, FUN = sum)
top_features_matrix = as.data.frame(top_features_matrix[order(top_features_matrix, decreasing = TRUE)])
colnames(top_features_matrix) = "Number_of_significant_genes"
top_features_matrix[1:10,]
View(top_features_matrix)
top_genes_coef_matrix = apply(coefficients, MARGIN = 2, FUN = sum)
top_genes_coef_matrix = as.data.frame(top_genes_coef_matrix[order(top_genes_coef_matrix, decreasing = TRUE)])
colnames(top_genes_coef_matrix) = "Number_of_significant_features"
top_genes_coef = rownames(top_genes_coef_matrix)[1:10]
top_genes_coef
View(top_genes_coef_matrix)
design2 = model.matrix (~ ., as.data.frame(morpho_train))
morpho_train = as.data.frame(morpho_train)
DMvalues_train_binary = t(DMvalues_train_binary)
design = model.matrix (~ cellularity, morpho_train)
limma_model = lmFit(DMvalues_train_binary, design=design, method="ls")
limma_model <- eBayes (limma_model)
toptable <- toptable(limma_model, coef = 2,  p.value = 1, number = 50000)
head(toptable)
design2 = model.matrix (~ ., as.data.frame(morpho_train))
limma_model2 = lmFit(DMvalues_train_binary, design=design2, method="ls")
limma_model2 <- eBayes (limma_model2)
toptable2 <- toptable(limma_model2, coef = 2,  p.value = 1, number = 50000)
head(toptable2)
View(DMvalues_train_binary)
DMvalues_train_binary = t(DMvalues_train_binary)
morpho_train = as.matrix(morpho_train)
View(DMvalues)
DMvalues = t(DMvalues)
methyl_clusters = kmeans(DMvalues, 10, nstart = 3)
DMvalues_clustered = as.matrix(methyl_clusters$centers)
rownames(DMvalues_clustered) = c("cluster1", "cluster2", "cluster3", "cluster4", "cluster5",
"cluster6", "cluster7", "cluster8", "cluster9", "cluster10")
DMvalues_clustered = t(DMvalues_clustered)
DMvalues_clustered_train = DMvalues_clustered[sample,]
DMvalues_clustered_test = DMvalues_clustered[-sample,]
aucs = c()
for (cluster in colnames(DMvalues_clustered_train)){
y_1 = DMvalues_clustered_train[,cluster]
y_1_test = DMvalues_clustered_test[,cluster]
model1 = lm(formula = y_1 ~ ., data = as.data.frame(morpho_train))
y_pred1 = predict(model1, as.data.frame(morpho_test))
#plot(roc(y_1_test, y_pred1))
#aucs[gene] = auc(y_1_test, y_pred1)
sum = summary(model1)
if (cluster == "cluster1"){
coefficients = as.data.frame(sum$coefficients)
coefficients[,"qvalue"] = as.numeric(qvalue(coefficients$`Pr(>|t|)`)$qvalues)
coefficients[,cluster] = coefficients$qvalue<0.2
coefficients <- select(coefficients, 6)
}else{
coefficients_temp = as.data.frame(sum$coefficients)
coefficients_temp[,"qvalue"] = as.numeric(qvalue(coefficients_temp$`Pr(>|t|)`)$qvalues)
coefficients_temp[,cluster] = coefficients_temp$qvalue<0.2
coefficients_temp <- select(coefficients_temp, 6)
coefficients = cbind(coefficients, coefficients_temp)
}
}
View(DMvalues_clustered_train)
View(DMvalues_train_binary)
View(coefficients)
coef_temp = as.data.frame(apply(coefficients, MARGIN = 1, FUN = as.integer))
rownames(coef_temp) = colnames(coefficients)
coefficients = t(as.matrix(coef_temp))
heatmap.2(coefficients, col = c("white", "black"), trace = "none", scale = "none")
top_features_matrix = apply(coefficients, MARGIN = 1, FUN = sum)
top_features_matrix = as.data.frame(top_features_matrix[order(top_features_matrix, decreasing = TRUE)])
colnames(top_features_matrix) = "Number_of_significant_genes"
top_features_matrix[1:10,]
View(top_features_matrix)
View(coefficients)
View(top_features_matrix)
DMvalues = t(DMvalues)
DMvalues_cluster3 = DMvalues[,methyl_clusters$cluster == 3]
DMvalues_cluster3 = t(DMvalues_cluster3)
View(DMvalues_cluster3)
test = morpho[,"nucleus_aspect_ratio"]
test = test > median(test)
test = order(test)
DMvalues_cluster3_ordered = DMvalues_cluster3[,test]
heatmap.2(DMvalues_cluster3_ordered, trace = "none", scale = "none", main = "Importance of cytoplasm intensity in cluster 9")
heatmap.2(DMvalues_cluster3_ordered, trace = "none", scale = "none", main = "Importance of nucleus_aspect_ratio in cluster 3")
DMvalues = t(DMvalues)
DMvalues_cluster6 = DMvalues[,methyl_clusters$cluster == 6]
DMvalues_cluster6 = t(DMvalues_cluster6)
test = morpho[,"cellularity"]
test = test > median(test)
test = order(test)
DMvalues_cluster6_ordered = DMvalues_cluster6[,test]
heatmap.2(DMvalues_cluster6_ordered, trace = "none", scale = "none")
DMvalues = t(DMvalues)
DMvalues_cluster6 = DMvalues[,methyl_clusters$cluster == 6]
DMvalues_cluster6 = t(DMvalues_cluster6)
test = morpho[,"cellularity"]
test = test > median(test)
test = order(test)
DMvalues_cluster6_ordered = DMvalues_cluster6[,test]
heatmap.2(DMvalues_cluster6_ordered, trace = "none", scale = "none")
View(DMvalues_clustered)
source("https://bioconductor.org/biocLite.R")
biocLite("ComplexHeatmap")
library(ComplexHeatmap)
?heatmap.2
main = "Importance of nucleus_aspect_ratio in cluster 3", add.expr = morpho[,"nucleus_aspect_ratio"])
heatmap.2(DMvalues_cluster3_ordered, trace = "none", scale = "none",
main = "Importance of nucleus_aspect_ratio in cluster 3", add.expr = morpho[,"nucleus_aspect_ratio"])
install.packages("RColorBrewer", dependencies = TRUE)
install.packages("RColorBrewer", dependencies = TRUE)
library(RColorBrewer)
rm(list = ls())
#Get morpho data
LGG_patient_statistics <- read.delim("/Users/cedoz/Documents/Stanford/Gevaert_Lab/data/LGG_CellularMorph/patient_statistics.txt", stringsAsFactors=FALSE)
GBM_patient_statistics <- read.delim("/Users/cedoz/Documents/Stanford/Gevaert_Lab/data/GBM_CellularMorph/patient_statistics.txt", stringsAsFactors=FALSE)
morpho <- inner_join(LGG_patient_statistics, GBM_patient_statistics, by = c("Feature", "Statistics"))
morpho <- filter (morpho, Statistics == "Median")
#row.names(morpho) = paste0(morpho$Feature, "_", morpho$Statistics)
row.names(morpho) = morpho$Feature
morpho <- select (morpho, -c(1,2))
morpho = t(morpho)
#Remove constant predictors : nucleus_deviation_from_polygon_convexity
morpho = morpho[,!colnames(morpho) %in% "nucleus_deviation_from_polygon_convexity"]
#Get methylation data: Maybe we should recompute to get with the 850 genes!
DMvalues <- read.delim("/Users/cedoz/Documents/Stanford/Gevaert_Lab/data/DMvalues_norm.txt", stringsAsFactors=FALSE)
DMvalues = t(DMvalues)
#context data
context = read.delim("/Users/cedoz/Documents/Stanford/Gevaert_Lab/data/TCGA_GBM_LGG_Merged_Cellular_Morph_Context_1.0/Cellular_Morph_Context_DictionarySize=8.txt", stringsAsFactors = FALSE)
context$PatientID = sub("-",".",sub("-",".",context$PatientID))
row.names(context) = context$PatientID
context = context[patient_intersect,]
context = context[,2:9]
#Retain only patients that have both methylation and morphometric data
patient_methyl = rownames(DMvalues)
patient_morpho = rownames(morpho)
patient_intersect = intersect(patient_methyl, patient_morpho)
#Only 342 patients in common
DMvalues = DMvalues[patient_intersect,]
morpho = morpho[patient_intersect,]
#combined_matrix = cbind(DMvalues, morpho)
#Spliting training/testing set
npatient = nrow (DMvalues)
size = floor(npatient*0.75)
sample = sample (npatient, size)
morpho = scale(morpho)
morpho_train = morpho[sample,]
morpho_test = morpho[-sample,]
DMvalues_train = DMvalues[sample,]
DMvalues_test = DMvalues[-sample,]
context = scale(context)
context_train = context[sample,]
context_test = context[-sample,]
to_ternary <- function (gene_vector){
for (i in 1:length(gene_vector)){
if (gene_vector[i] > 0){
gene_vector[i] = 1
}
if (gene_vector[i] == 0){
gene_vector[i] = 0
}
if (gene_vector[i] < 0){
gene_vector[i] = -1
}
}
gene_vector
}
label_size <- function (vector){
size_hypo = 0
size_hyper = 0
size_null = 0
for (i in 1:length(vector)){
if (vector[i] == 1){
size_hyper = size_hyper + 1
}
if (vector[i] == 0){
size_null = size_null + 1
}
if (vector[i] == -1){
size_hypo = size_hypo + 1
}
}
c(size_hyper, size_null, size_hypo)
}
DMvalues_train_binary = apply(DMvalues_train, MARGIN = 2, FUN = to_ternary)
DMvalues_test_binary = apply(DMvalues_test, MARGIN = 2, FUN = to_ternary)
DMvalues_summary = apply(DMvalues_train_binary, MARGIN = 2, FUN = label_size)
#Extract the lists of genes "Hyper/null", "Hyper/Hypo" and "null/hypo" BUT not the 3: volume auc??
DMvalues_summary = as.data.frame(t(DMvalues_summary))
colnames(DMvalues_summary) = c("hyper", "null", "hypo")
DMvalues_summary <- mutate (DMvalues_summary, gene = rownames(DMvalues_summary))
gene_hyper_null = filter(DMvalues_summary, hyper != 0 & null != 0 & hypo == 0)[,'gene']
gene_hyper_hypo = filter(DMvalues_summary, hyper != 0 & null == 0 & hypo != 0)[,'gene']
gene_null_hypo = filter(DMvalues_summary, hyper == 0 & null != 0 & hypo != 0)[,'gene']
#Univariate regressions of DM values (genes) on morpho features
aucs = c()
for (gene in gene_hyper_null){
y_1 = as.factor(DMvalues_train_binary[,gene])
y_1_test = as.factor(DMvalues_test_binary[,gene])
model1 = glm(formula = y_1 ~ ., family = "binomial", data = as.data.frame(morpho_train))
y_pred1 = predict(model1, as.data.frame(morpho_test))
#plot(roc(y_1_test, y_pred1))
aucs[gene] = auc(y_1_test, y_pred1)
sum = summary(model1)
if (gene == gene_hyper_null[1]){
coefficients = as.data.frame(sum$coefficients)
coefficients[,"qvalue"] = as.numeric(qvalue(coefficients$`Pr(>|z|)`)$qvalues)
coefficients[,gene_hyper_null[1]] = coefficients$qvalue<0.05
coefficients <- select(coefficients, 6)
}else{
coefficients_temp = as.data.frame(sum$coefficients)
coefficients_temp[,"qvalue"] = as.numeric(qvalue(coefficients_temp$`Pr(>|z|)`, lambda = seq(0.05, 0.90, 0.05))$qvalues)
coefficients_temp[,gene] = coefficients_temp$qvalue<0.05
coefficients_temp <- select(coefficients_temp, 6)
coefficients = cbind(coefficients, coefficients_temp)
rm(coefficients_temp)
}
}
#Plot aucs
mean_aucs_hyper_null = mean(aucs)
plot(density(aucs), main = "Density of AUCs for the hyper/null genes")
aucs = aucs[order(aucs, decreasing = TRUE)]
#Extract top genes (auc)
top_genes_auc = data.frame(aucs[1:10])
colnames(top_genes_auc) = "auc"
top_genes_auc
#Plot coefficients matrices
coef_temp = as.data.frame(apply(coefficients, MARGIN = 1, FUN = as.integer))
rownames(coef_temp) = colnames(coefficients)
coefficients = t(as.matrix(coef_temp))
heatmap.2(coefficients, col = c("white", "black"), trace = "none", scale = "none")
#Extract top features
top_features_matrix = apply(coefficients, MARGIN = 1, FUN = sum)
top_features_matrix = as.data.frame(top_features_matrix[order(top_features_matrix, decreasing = TRUE)])
colnames(top_features_matrix) = "Number_of_significant_genes"
top_features_matrix[1:10,]
#Extract top genes: not rigorous??
top_genes_coef_matrix = apply(coefficients, MARGIN = 2, FUN = sum)
top_genes_coef_matrix = as.data.frame(top_genes_coef_matrix[order(top_genes_coef_matrix, decreasing = TRUE)])
colnames(top_genes_coef_matrix) = "Number_of_significant_features"
top_genes_coef = rownames(top_genes_coef_matrix)[1:10]
top_genes_coef
#Prob: Impossible to compute ROC curve (or 3D curve -> auc : VOLUME under the roc curve)
#y_pred2 = as.numeric(predict(model2, morpho_test))
#y_pred3 = predict(model3, morpho_test)
#model2 = glmnet(x = morpho_train, y = y_1, family = "binomial", lambda = 0)
#model3 = glmnet(x = morpho_train, y = y_1, family = "multinomial", type.multinomial = "ungrouped", lambda = 0)
#kmeans clustering on the genes to create metagenes: Need to cluster on whole matrix!
DMvalues = t(DMvalues)
methyl_clusters = kmeans(DMvalues, 10, nstart = 3)
DMvalues_clustered = as.matrix(methyl_clusters$centers)
rownames(DMvalues_clustered) = c("cluster1", "cluster2", "cluster3", "cluster4", "cluster5",
"cluster6", "cluster7", "cluster8", "cluster9", "cluster10")
DMvalues_clustered = t(DMvalues_clustered)
DMvalues_clustered_train = DMvalues_clustered[sample,]
DMvalues_clustered_test = DMvalues_clustered[-sample,]
#Univariate regressions of clustered DM values (genes) on morpho features: no classification -> no auc
aucs = c()
for (cluster in colnames(DMvalues_clustered_train)){
y_1 = DMvalues_clustered_train[,cluster]
y_1_test = DMvalues_clustered_test[,cluster]
model1 = lm(formula = y_1 ~ ., data = as.data.frame(morpho_train))
y_pred1 = predict(model1, as.data.frame(morpho_test))
#plot(roc(y_1_test, y_pred1))
#aucs[gene] = auc(y_1_test, y_pred1)
sum = summary(model1)
if (cluster == "cluster1"){
coefficients = as.data.frame(sum$coefficients)
coefficients[,"qvalue"] = as.numeric(qvalue(coefficients$`Pr(>|t|)`)$qvalues)
coefficients[,cluster] = coefficients$qvalue<0.2
coefficients <- select(coefficients, 6)
}else{
coefficients_temp = as.data.frame(sum$coefficients)
coefficients_temp[,"qvalue"] = as.numeric(qvalue(coefficients_temp$`Pr(>|t|)`)$qvalues)
coefficients_temp[,cluster] = coefficients_temp$qvalue<0.2
coefficients_temp <- select(coefficients_temp, 6)
coefficients = cbind(coefficients, coefficients_temp)
}
}
#Plot coefficients matrices
coef_temp = as.data.frame(apply(coefficients, MARGIN = 1, FUN = as.integer))
rownames(coef_temp) = colnames(coefficients)
coefficients = t(as.matrix(coef_temp))
heatmap.2(coefficients, col = c("white", "black"), trace = "none", scale = "none")
#Extract top features
top_features_matrix = apply(coefficients, MARGIN = 1, FUN = sum)
top_features_matrix = as.data.frame(top_features_matrix[order(top_features_matrix, decreasing = TRUE)])
colnames(top_features_matrix) = "Number_of_significant_genes"
top_features_matrix[1:10,]
#Most important morphometric features:
#cellularity, voronoi area, nucleus_bending energy_s1_mean, nucleus_max_curvature, nucleus intensity
rm(list = ls())
LGG_patient_statistics <- read.delim("/Users/cedoz/Documents/Stanford/Gevaert_Lab/data/LGG_CellularMorph/patient_statistics.txt", stringsAsFactors=FALSE)
GBM_patient_statistics <- read.delim("/Users/cedoz/Documents/Stanford/Gevaert_Lab/data/GBM_CellularMorph/patient_statistics.txt", stringsAsFactors=FALSE)
morpho <- inner_join(LGG_patient_statistics, GBM_patient_statistics, by = c("Feature", "Statistics"))
library(ggplot2)
library(dplyr)
library(MethylMix)
library(glmnet)
library(limma)
library(pROC)
library(gplots)
library(qvalue)
library(caret)
library(ComplexHeatmap)
library(RColorBrewer)
rm(list = ls())
library(ggplot2)
library(dplyr)
library(MethylMix)
library(glmnet)
library(limma)
library(pROC)
library(gplots)
library(qvalue)
library(caret)
library(RColorBrewer)
rm(list = ls())
#Get morpho data
LGG_patient_statistics <- read.delim("/Users/cedoz/Documents/Stanford/Gevaert_Lab/data/LGG_CellularMorph/patient_statistics.txt", stringsAsFactors=FALSE)
GBM_patient_statistics <- read.delim("/Users/cedoz/Documents/Stanford/Gevaert_Lab/data/GBM_CellularMorph/patient_statistics.txt", stringsAsFactors=FALSE)
morpho <- inner_join(LGG_patient_statistics, GBM_patient_statistics, by = c("Feature", "Statistics"))
morpho <- filter (morpho, Statistics == "Median")
#row.names(morpho) = paste0(morpho$Feature, "_", morpho$Statistics)
row.names(morpho) = morpho$Feature
morpho <- select (morpho, -c(1,2))
morpho = t(morpho)
#Remove constant predictors : nucleus_deviation_from_polygon_convexity
morpho = morpho[,!colnames(morpho) %in% "nucleus_deviation_from_polygon_convexity"]
#Get methylation data: Maybe we should recompute to get with the 850 genes!
DMvalues <- read.delim("/Users/cedoz/Documents/Stanford/Gevaert_Lab/data/DMvalues_norm.txt", stringsAsFactors=FALSE)
DMvalues = t(DMvalues)
View(morpho)
library(ggplot2)
library(dplyr)
library(MethylMix)
library(glmnet)
library(limma)
library(pROC)
library(gplots)
library(qvalue)
library(caret)
library(RColorBrewer)
rm(list = ls())
#Get morpho data
LGG_patient_statistics <- read.delim("/Users/cedoz/Documents/Stanford/Gevaert_Lab/data/LGG_CellularMorph/patient_statistics.txt", stringsAsFactors=FALSE)
GBM_patient_statistics <- read.delim("/Users/cedoz/Documents/Stanford/Gevaert_Lab/data/GBM_CellularMorph/patient_statistics.txt", stringsAsFactors=FALSE)
morpho <- inner_join(LGG_patient_statistics, GBM_patient_statistics, by = c("Feature", "Statistics"))
morpho <- filter (morpho, Statistics == "Median")
#row.names(morpho) = paste0(morpho$Feature, "_", morpho$Statistics)
row.names(morpho) = morpho$Feature
morpho <- select (morpho, -c(1,2))
